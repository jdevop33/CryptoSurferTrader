sources:
  my_repo:
    type: gitSample
    name: 8Trader8Panda Trading Platform
    endpoint: https://github.com/yourusername/8trader8panda.git
    branch: main

stages:
  java_script_code_scan_stage:
    name: "Test"
    jobs:
      java_script_code_scan_job:
        name: "JavaScript Code Scan"
        runsOn:
          group: public/ap-southeast-1
          container: build-steps-public-registry.ap-southeast-1.cr.aliyuncs.com/build-steps/alinux3:latest
        steps:
          java_script_code_scan_step:
            name: "JavaScript Code Scan"
            step: "JavaScriptCodeScan"
            with:
              localDependencies: "*"
              useLocalRules: false
              nodeVersion: "20.18.1"
              incrementalScan: false
              exclusion: "test/\nbuild/\nnode_modules/\nvendor/\ndist/\n**/*.min.js\n**/*-min.js\n**/*.bundle.js\n"
      node_unit_test_job:
        name: "Node.js Unit Test"
        runsOn:
          group: public/ap-southeast-1
          container: build-steps-public-registry.ap-southeast-1.cr.aliyuncs.com/build-steps/alinux3:latest
        steps:
          setup_npmrc_step:
            name: "Setup npmrc"
            step: SetupNpmrc
            with:
              npmPrivateRepoConfigPath: "/root/.npmrc"
          setup_node_step:
            name: "Setup Node"
            step: SetupNode
            with:
              versionType: "predefined"
              nodeVersion: "20.18.1"
              npmType: "npm"
          command_step:
            name: "Execute Command"
            step: Command
            with:
              run: |
                npm install
                echo "Skipping tests for initial deployment"
          unit_test_report_step:
            name: "Unit Test Report"
            step: UnitTestReport
            with:
              reportPath: mochawesome-report/mochawesome.html
              reporter: Node.js-Mocha
              failOnError: false

  node_build_stage:
    name: "Build"
    jobs:
      node_build_job:
        name: "Node.js Build"
        runsOn: 
          group: public/ap-southeast-1
          container: build-steps-public-registry.ap-southeast-1.cr.aliyuncs.com/build-steps/alinux3:latest
        steps:
          setup_npmrc_step:
            name: "Setup npmrc"
            step: SetupNpmrc
            with:
              npmPrivateRepoConfigPath: "/root/.npmrc"
          setup_node_step:
            name: "Setup Node"
            step: SetupNode
            with:
              versionType: "predefined"
              nodeVersion: "20.18.1"
              npmType: "npm"
          command_step:
            name: "Execute Command"
            step: Command
            with:
              run: |
                # Install dependencies
                npm install
                
                # Create production environment file using secure environment variables
                cat > .env.production << 'EOF'
                NODE_ENV=production
                PORT=3000
                HOST=0.0.0.0
                ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
                ALIBABA_CLOUD_API_KEY=${ALIBABA_CLOUD_API_KEY}
                TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
                TWITTER_CLIENT_SECRET=${TWITTER_CLIENT_SECRET}
                DATABASE_URL=postgresql://trading_user:trading_password@localhost:5432/trading_db
                REDIS_URL=redis://localhost:6379
                SESSION_SECRET=${SESSION_SECRET}
                JWT_SECRET=${JWT_SECRET}
                EOF
                
                # Create PM2 ecosystem file
                cat > ecosystem.config.js << 'EOF'
                module.exports = {
                  apps: [{
                    name: '8trader8panda',
                    script: 'npm',
                    args: 'run dev',
                    cwd: '/opt/trading-app',
                    instances: 1,
                    exec_mode: 'fork',
                    env: {
                      NODE_ENV: 'production',
                      PORT: 3000
                    },
                    error_file: '/var/log/8trader8panda-error.log',
                    out_file: '/var/log/8trader8panda-out.log',
                    log_file: '/var/log/8trader8panda.log',
                    time: true,
                    autorestart: true,
                    max_restarts: 10,
                    min_uptime: '10s',
                    max_memory_restart: '1G'
                  }]
                };
                EOF
                
                # Create deployment package
                tar -czf 8trader8panda-${BUILD_NUMBER}.tar.gz package.json server/ client/ shared/ .env.production ecosystem.config.js vite.config.ts tsconfig.json tailwind.config.ts postcss.config.js
                
          upload_artifact_step:
            name: "Artifact Upload"
            step: ArtifactUpload
            with:
              uploadType: packages
              serviceConnection: 8trader8panda-connection
              repo: flow_generic_repo
              artifact: "8trader8panda_${PIPELINE_ID}"
              filePath: "8trader8panda-${BUILD_NUMBER}.tar.gz"
              version: "${BUILD_NUMBER}"

  vm_deploy_stage:
    name: "Deploy to ECS"
    jobs:
      vm_deploy_job:
        name: "ECS Production Deployment"
        component: "VMDeploy"
        with:
          downloadArtifact: true
          useEncode: false
          machineGroup: "8trader8panda-ecs"
          run: |
            # Stop existing application
            pm2 delete 8trader8panda 2>/dev/null || true
            pkill -f "node.*3000" 2>/dev/null || true
            
            # Create application directory
            mkdir -p /opt/trading-app
            cd /opt/trading-app
            
            # Remove old files
            rm -rf *
            
            # Extract new deployment
            tar -xzf /home/admin/app/8trader8panda-*.tar.gz -C /opt/trading-app/
            
            # Install production dependencies
            npm install --production
            
            # Set permissions
            chown -R www-data:www-data /opt/trading-app 2>/dev/null || true
            chmod -R 755 /opt/trading-app
            
            # Start application with PM2
            pm2 start ecosystem.config.js
            pm2 save
            pm2 startup
            
            # Configure Nginx if not exists
            if [ ! -f /etc/nginx/sites-enabled/8trader8panda ]; then
              cat > /etc/nginx/sites-available/8trader8panda << 'NGINX_EOF'
            server {
                listen 80;
                server_name ${ECS_SERVER_IP} 8trader8panda8.xin;
                
                location / {
                    proxy_pass http://127.0.0.1:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            NGINX_EOF
              ln -sf /etc/nginx/sites-available/8trader8panda /etc/nginx/sites-enabled/
            fi
            
            # Reload nginx
            nginx -t && systemctl reload nginx
            
            # Verify deployment
            sleep 5
            curl -f http://localhost:3000/api/health || exit 1
            
            echo "✅ 8Trader8Panda deployed successfully on ${ECS_SERVER_IP}"
            echo "🌐 Access: http://${ECS_SERVER_IP}:3000"
            
          artifactDownloadPath: "/home/admin/app/"
          executeUser: "root"
          artifact: $[stages.node_build_stage.node_build_job.upload_artifact_step.artifacts.8trader8panda_${PIPELINE_ID}]